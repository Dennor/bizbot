name: validator
description: Description of validator
version: 0.0.1
endpoints:
  validate:
    file: validate.js
    description: |
      Validate input according to certain set of rules.
      This is a simple wrapper around common-validators library from npm.

      Check out their documentation for more information.

      Syntax to create rules:
        {
          "<ARGNAME>": [
            {
              "rule": "<rulename>", # rule name, check out common-validator npm package
              "arg": {}, # optional arguments to pass for rule, can be anything
              "options": {} # optional options for rule
            },
            {
              "rule": "<rulename2>"
            },
            "<rulename3>" # For simple rules not requiring arg and options shorthand form is accepted.
          ]
        }
      Example: 
        {
          "foo": [
            {"rule": "string"},
            {"rule": "notEmpty"}
          ]
        }
      This will check if argument foo is a string and is not empty.      

      Most rules will behave similary to common-validators library, the only exception is 'custom' rule which instead of function will execute socket endpoint named by `arg` with value of the argument and options argument passed in request body to the socket. Sockets implementing `custom` validator are expected to always return 200. Socket should return a message on error or empty string.

      For example:
        endpoint: validators/valdiate_foo
        payload: {
          value: "bar",
          options: {
            "argName": "foo"
          }
        }
      
      Example responses:

      Valid:
        []
      
      Invalid:
        [
          {"error": "foo", "message": "foo shall not be bar"}
        ]

      Because this socket endpoint can execute ANY endpoint in your instance depending on supplied rules it is limited to be only run internally or with ACCOUNT_KEY.
    parameters:
      args:
        type: object
        description: Arguments object passed to the request that is being validated.
      rules:
        type: object
        description: Rules used to validate this request.
      meta:
        type: object
        description: request metadata, this will be used to construct validation rules if rules argument is not supplied, rules will be constructed from socket.yml of the socket.
        example: |
          endpoints:
            get-user:
              parameters:
                email:
                  type: string
                  required: true
                  constraints:
                    - notEmpty
                    - email
                    - maxLength:
                        arg:
                          - 128
                    - custom:
                      arg:
                        - validators/check_if_city
      example: |
        {
          "foo": [
            {"rule": "string"}
          ]
        }
      required_args:
        type: object
        description: |
          List of arguments requried in request (convienience paramter, equals to {"rule": "required"} for argument)
        example: []
    response:
      mimetype: application/json
      examples:
        - exit_code: 200
          example: |
            {
              "args" : "<args>", # Pass back arguments.
              "validationErrors": []  # This contains validation errors, empty means no errors.
            }
        - exit_code: 400
          example: |
            {
              "message": "bad rules"
            }
        - exit_code: 401
          example: |
            {
              "message": "unauthorized"
            }